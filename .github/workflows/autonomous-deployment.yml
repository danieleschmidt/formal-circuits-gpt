name: Autonomous Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: formal-circuits-gpt
  PYTHON_VERSION: '3.11'

jobs:
  quality-gates:
    name: Quality Gates & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        
    - name: Security validation
      run: |
        python -c "
        from formal_circuits_gpt.security.input_validator import InputValidator
        validator = InputValidator(strict_mode=True)
        print('✓ Security validation passed')
        "
        
    - name: Run linting
      run: |
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
        black --check src/
        isort --check-only src/
        
    - name: Type checking
      run: mypy src/ --ignore-missing-imports
      
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-fail-under=80
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
    - name: Security scan with Bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Performance validation
      run: |
        python -c "
        import time
        from formal_circuits_gpt.optimization.adaptive_cache import AdaptiveCacheManager
        
        start = time.time()
        cache = AdaptiveCacheManager()
        for i in range(100):
            cache.put(f'perf_test_{i}', f'data_{i}')
        perf_time = (time.time() - start) * 1000
        
        assert perf_time < 1000, f'Performance too slow: {perf_time}ms'
        print(f'✓ Performance validation passed: {perf_time:.2f}ms')
        "

  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        output-file: sbom.spdx.json
        
    - name: Scan for vulnerabilities
      uses: anchore/scan-action@v3
      with:
        image: ${{ steps.meta.outputs.tags }}
        fail-build: true
        severity-cutoff: high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}
        
    - name: Deploy to staging
      run: |
        # Update image in deployment
        sed -i "s|formal-circuits-gpt:latest|${{ needs.build-and-push.outputs.image-tag }}|g" deployment/kubernetes/deployment.yaml
        
        # Apply namespace and secrets first
        kubectl apply -f deployment/kubernetes/deployment.yaml --dry-run=client -o yaml | \
          kubectl apply -f -
          
        # Wait for rollout
        kubectl rollout status deployment/fcgpt-app -n formal-circuits-gpt --timeout=600s
        
    - name: Run smoke tests
      run: |
        kubectl port-forward service/fcgpt-service 8080:8000 -n formal-circuits-gpt &
        sleep 10
        
        # Health check
        curl -f http://localhost:8080/health || exit 1
        
        # Basic API test
        curl -f http://localhost:8080/api/v1/verify \
          -H "Content-Type: application/json" \
          -d '{"hdl_code":"module test(); endmodule","properties":[]}' || exit 1
          
        echo "✓ Staging smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}
        
    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        sed -i "s|formal-circuits-gpt:latest|${{ needs.build-and-push.outputs.image-tag }}|g" deployment/kubernetes/deployment.yaml
        sed -i "s|fcgpt-app|fcgpt-app-green|g" deployment/kubernetes/deployment.yaml
        
        kubectl apply -f deployment/kubernetes/deployment.yaml
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/fcgpt-app-green -n formal-circuits-gpt --timeout=900s
        
        # Run production validation
        kubectl port-forward service/fcgpt-service-green 8080:8000 -n formal-circuits-gpt &
        sleep 30
        
        # Comprehensive health checks
        for i in {1..5}; do
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ready || exit 1
          sleep 5
        done
        
        # Switch traffic to green (update service selector)
        kubectl patch service fcgpt-service -n formal-circuits-gpt \
          -p '{"spec":{"selector":{"app":"fcgpt-app-green"}}}'
        
        # Wait and monitor
        sleep 60
        
        # Clean up old blue deployment
        kubectl delete deployment fcgpt-app -n formal-circuits-gpt || true
        kubectl patch deployment fcgpt-app-green -n formal-circuits-gpt \
          -p '{"metadata":{"name":"fcgpt-app"}}'
        
        echo "✓ Production deployment completed successfully"

  security-monitoring:
    name: Security & Compliance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'https://api.formal-circuits-gpt.com'
        fail_action: true
        
    - name: Compliance Scan
      run: |
        # SOC2/HIPAA compliance checks
        echo "Running compliance validation..."
        
        # Check encryption in transit
        curl -I https://api.formal-circuits-gpt.com | grep -q "Strict-Transport-Security"
        
        # Check security headers
        curl -I https://api.formal-circuits-gpt.com | grep -q "X-Content-Type-Options"
        curl -I https://api.formal-circuits-gpt.com | grep -q "X-Frame-Options"
        
        echo "✓ Compliance checks passed"

  performance-monitoring:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Load Testing with K6
      run: |
        # Install k6
        curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update && sudo apt-get install k6
        
        # Create load test script
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export const options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 50 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.1'],
          },
        };
        
        export default function () {
          const response = http.post(
            'https://api.formal-circuits-gpt.com/api/v1/verify',
            JSON.stringify({
              hdl_code: 'module test(); endmodule',
              properties: []
            }),
            { headers: { 'Content-Type': 'application/json' } }
          );
          
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          
          sleep(1);
        }
        EOF
        
        # Run load test
        k6 run load-test.js
        
        echo "✓ Performance tests completed"

  release-notification:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, security-monitoring, performance-monitoring]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Notify Success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🚀 Production deployment successful!"
        echo "Version: ${{ github.ref_name }}"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Commit: ${{ github.sha }}"
        
        # Send notification to Slack/Teams/etc
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{
            "text": "🚀 Formal-Circuits-GPT ${{ github.ref_name }} deployed to production successfully!\n\nCommit: ${{ github.sha }}\nImage: ${{ needs.build-and-push.outputs.image-tag }}"
          }' || true
        
    - name: Notify Failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        
        # Send failure notification
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{
            "text": "❌ Formal-Circuits-GPT ${{ github.ref_name }} deployment FAILED!\n\nCommit: ${{ github.sha }}\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }' || true