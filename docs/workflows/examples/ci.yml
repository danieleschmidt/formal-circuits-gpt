# GitHub Actions CI Workflow for formal-circuits-gpt
# Place this file at: .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

      - name: Type checking with mypy
        run: mypy src/

      - name: Security scan with bandit
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

  # Job 2: Test Matrix
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Reduce matrix for faster builds
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y coq
          # Install Isabelle
          wget -q https://isabelle.in.tum.de/dist/Isabelle2024.tar.gz
          tar -xzf Isabelle2024.tar.gz
          sudo mv Isabelle2024 /opt/
          sudo ln -s /opt/Isabelle2024/bin/isabelle /usr/local/bin/isabelle

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install coq
          # Isabelle installation for macOS would go here

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run unit tests
        run: pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        env:
          # Only run integration tests on one platform to save resources
          FORMAL_CIRCUITS_TEST_INTEGRATION: true
        run: pytest tests/integration/ -v --tb=short

      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          pytest --cov=formal_circuits_gpt --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest-report.xml

  # Job 3: Build Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Job 4: Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: formal-circuits-gpt:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm formal-circuits-gpt:test formal-circuits-gpt --version
          docker run --rm formal-circuits-gpt:test formal-circuits-gpt --help

  # Job 5: Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Check documentation links
        run: |
          cd docs
          make linkcheck

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Job 6: Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]
          sudo apt-get update
          sudo apt-get install -y coq

      - name: Run benchmarks
        run: |
          pytest tests/benchmarks/ -v --benchmark-json=benchmark.json

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '200%'

  # Job 7: Dependency Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run safety check
        run: safety check --json --output safety-report.json

      - name: Run pip-audit
        run: pip-audit --format=json --output=pip-audit-report.json

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  # Job 8: Final Status Check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker, docs, dependency-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.docker.result }}" == "failure" || 
                "${{ needs.docs.result }}" == "failure" || 
                "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs passed"
          fi

      - name: Post to Slack on failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'CI pipeline failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# Workflow-level configuration
permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true