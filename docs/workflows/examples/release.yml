# GitHub Actions Release Workflow for formal-circuits-gpt
# Place this file at: .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # Job 1: Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if this is a pre-release (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            exit 1
          fi

  # Job 2: Run Full Test Suite
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y coq
          # Install Isabelle
          wget -q https://isabelle.in.tum.de/dist/Isabelle2024.tar.gz
          tar -xzf Isabelle2024.tar.gz
          sudo mv Isabelle2024 /opt/
          sudo ln -s /opt/Isabelle2024/bin/isabelle /usr/local/bin/isabelle

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,dev]

      - name: Run comprehensive test suite
        run: |
          pytest tests/ -v --cov=formal_circuits_gpt --cov-report=xml
          
      - name: Run benchmarks
        run: |
          pytest tests/benchmarks/ -v --benchmark-json=benchmark.json

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage.xml
            benchmark.json

  # Job 3: Build Distribution
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Remove 'v' prefix for Python version
          PYTHON_VERSION="${VERSION#v}"
          sed -i "s/^version = .*/version = \"$PYTHON_VERSION\"/" pyproject.toml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          twine check dist/*
          pip install dist/*.whl
          formal-circuits-gpt --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Job 4: Build and Test Docker Image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            formal-circuits-gpt
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install safety pip-audit

      - name: Run security scans
        run: |
          safety check
          pip-audit
          bandit -r src/ -f json -o bandit-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan
          path: bandit-report.json

  # Job 6: Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, build, docker, security]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREV_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "# Changelog" > changelog.md
          echo "" >> changelog.md
          
          if [[ -n "$PREV_VERSION" ]]; then
            echo "## Changes since $PREV_VERSION" >> changelog.md
            echo "" >> changelog.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $PREV_VERSION..HEAD >> changelog.md
          else
            echo "## Initial Release" >> changelog.md
            echo "" >> changelog.md
            echo "- Initial release of formal-circuits-gpt" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Installation" >> changelog.md
          echo "" >> changelog.md
          echo "\`\`\`bash" >> changelog.md
          echo "pip install formal-circuits-gpt==${VERSION#v}" >> changelog.md
          echo "\`\`\`" >> changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: changelog.md
          files: dist/*
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          draft: false

  # Job 7: Publish to PyPI
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, test, build, security, release]
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to TestPyPI first
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Test TestPyPI installation
        run: |
          sleep 60  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ formal-circuits-gpt
          formal-circuits-gpt --version

      - name: Publish to PyPI
        if: needs.validate.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Job 8: Update Documentation
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.validate.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # Job 9: Post-Release Notifications
  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, pypi-publish, docs]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.pypi-publish.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 Release ${{ needs.validate.outputs.version }} published successfully!
            
            📦 PyPI: https://pypi.org/project/formal-circuits-gpt/
            🐙 GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}
            📚 Docs: https://${{ github.repository_owner }}.github.io/formal-circuits-gpt/
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: |
          needs.validate.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.pypi-publish.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Release ${{ needs.validate.outputs.version }} failed!
            
            Please check the workflow logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create follow-up issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ needs.validate.outputs.version }} failed`,
              body: `The release workflow for version ${{ needs.validate.outputs.version }} failed.
              
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              Please investigate and fix the issues before attempting to release again.`,
              labels: ['bug', 'release']
            });

# Workflow-level configuration
permissions:
  contents: write
  id-token: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false